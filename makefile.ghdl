#  File Name:         makefile
#  Purpose:           make file for compiling GHDL cosimulation with
#                     callable simulator
#  Revision:          OSVVM MODELS STANDARD VERSION
#
#  Maintainer:        Simon Southwell email:  simon@gmail.com
#  Contributor(s):
#     Simon Southwell     email:  simon.southwell@gmail.com
#
#  Description
#    Tcl procedures supporting compiling of Co-cimuation C/C++ code
#    using make
#
#  Revision History:
#    Date      Version    Description
#    10/2022   2023.01    Initial version
#
#  This file is part of OSVVM.
#
#  Copyright (c) 2022 by [OSVVM Authors](AUTHORS.md)
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and

#  limitations under the License.
#
# --------------------------------------------------------------------------
#
# User overridable variables: make VAR=NEW_VALUE ...
#
#   OSVVMDIR    : Absolute path to the OsvvmLibraries directory
#   GHDLROOT    : Absolute path to the GHDL lib directory
#   USRCDIR     : Directory containing the test source code
#   TEST        : The directory containing the test source code, relative to ${USRCDIR}
#   COSIMDIR    : The path to OsvvmLibraries/CoSim, if different from ${USRCDIR}
#   OPDIR       : Directory for compilation output, if not the directory from which make was run
#   USRFLAGS    : Additional user defined compile and link flags
#   VHDLLIB     : The path, relative to the run directory, to the VHDL_LIBS/<version>/ directory
#   TBLIBRARY   : Name of library containing top level test component
#   TESTBENCH   : Name of top level test component
#   ADALIBPATH  : Path to ADA library. Only really needed for MINGW. Version specific.
#
# This makefile assumes all the relevant OsvvmLibraries and test files
# have already been analysed into libraries in ${VHDLLIB}
#
# --------------------------------------------------------------------------

# Get OS type
OSTYPE:=$(shell uname)

# Set OS specific variables between Linux and Windows (MinGW)
ifeq (${OSTYPE}, Linux)
  OSVVMDIR         = /git/OsvvmLibraries
  GHDLROOT         = /usr/lib/ghdl
  SIMEXE           = ${LCTB}
  OSGHDLFLAGS      =
  ADALIBPATH       = /usr/lib/gcc/x86_64-linux-gnu/9/adalib/
else
  OSVVMDIR         = /c/git/OsvvmLibraries
  GHDLROOT         = /mingw64/lib/ghdl
  SIMEXE           = ${LCTB}.exe
  OSGHDLFLAGS      = -ldbghelp -Wl,--stack=0x2000000
  ADALIBPATH       = /mingw64/lib/gcc/x86_64-w64-mingw32/12.2.0/adalib/
endif

#
# User overridable variables (see above)
#

USRCDIR            = ${OSVVMDIR}/CoSim
TEST               = tests/ghdl_main
CTESTDIR           = ${USRCDIR}/${TEST}
COSIMDIR           = ${USRCDIR}
OPDIR              = ${CURDIR}

USRFLAGS           =

VHDLLIB            = VHDL_LIBS/GHDL-3.0.0-dev
TBLIBRARY          = osvvm_tbaxi4
TESTBENCH          = TbAb_CoSim

#
# Directory with test code to be compiled
#
MAINSRC            = main.cpp

#
# gcc linker flags required by GHDL code
#
GHDLFLAGS          = -L ${ADALIBPATH}                                     \
                     -L.                                                  \
                     ${GHDLROOT}/libgrt.a                                 \
                     -l:VProc.so -l:VUser.so                              \
                     -ldl                                                 \
                     -lpthread                                            \
                     -lz                                                  \
                     ${OSGHDLFLAGS}

#
# Test bench name in lower case
#
LCTB               = $(shell echo ${TESTBENCH} | tr A-Z a-z)

#
# Compilation outputs
#
COSIMCODE          = VProc.so
USRCODE            = VUser.so
TBLIB              = libtb.a
LIBELAB            = libelab.a

#
# Compilers
#
CC                 = g++
AR                 = ar
MAKE               = make
GHDL               = ghdl

#------------------------------------------------------
# BUILD RULES
#------------------------------------------------------

all: ${SIMEXE}

#
# Co-simulation code compiled in the same way as normal, but with
# DISABLE_VUSERMAIN_THREAD defined
#
${USRCODE} ${COSIMCODE}:
	@${MAKE} -C ${COSIMDIR}                                                 \
                --no-print-directory                                      \
                SIM=GHDL                                                  \
                USRCDIR=${CTESTDIR}                                       \
                OPDIR=${OPDIR}                                            \
                EXCLFILE=${MAINSRC}                                       \
                USRFLAGS="-I./include -L./lib -DGHDL -DDISABLE_VUSERMAIN_THREAD ${USRFLAGS}"

#
# Collect all the user objects in VHDL_LIBS and all the relevant objects
# for the libraries into a new static library
#
${TBLIB}: obj/${MAINSRC:%.cpp=%.o}
	@rm -f $@
	@${AR} crs $@ $<
	@for i in `ls ${VHDLLIB}` ;                                           \
    do                                                                    \
       ${AR} q $@ `find ${VHDLLIB}/$${i}/ -name "*.o"` ;                  \
    done
	@${AR} q $@ `find ${GHDLROOT}/std/v08/ ${GHDLROOT}/ieee/v08/ -name "*.o"`

#
# Elaborate the test bench to generate the top level object file
#
e~${LCTB}.o: ${COSIMCODE}
	@${GHDL} -e --std=08                                                  \
             -Wl,-lpthread                                                \
             --work=${TBLIBRARY}                                          \
             --workdir=${VHDLLIB}/${TBLIBRARY}/v08                        \
             -P${VHDLLIB}                                                 \
             ${TESTBENCH}

#
# Create library from the elabrorated code
#
${LIBELAB}: e~${LCTB}.o
	@rm -f $@
	@${AR} crs $@ $<

# Remove executable generated by GHDL elaboration as this won't work
	@rm -f ${LCTB}.exe

#
# Generate a new executable with all user code and the GHDL required libraries
#
${SIMEXE}: ${LIBELAB} ${TBLIB} ${USRCODE}
	@${CC} -Wl,-whole-archive                                             \
           $<                                                             \
           -Wl,-no-whole-archive                                          \
           ${TBLIB}                                                       \
           ${GHDLFLAGS}                                                   \
           -o $@

#
# Build rule for main source code
#
obj/${MAINSRC:%.cpp=%.o}: ${CTESTDIR}/${MAINSRC}
	@g++ -c -I${COSIMDIR}/code $< -o $@

#------------------------------------------------------
# CLEANING RULES
#------------------------------------------------------

clean:
	@rm -rf obj lib*.a ${TBLIB} ${COSIMCODE} ${USRCODE} ${SIMEXE} e~${LCTB}.o
